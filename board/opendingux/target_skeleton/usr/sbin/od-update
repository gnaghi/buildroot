#!/bin/sh

if [ $# -ne 1 ] ; then
	echo "Incorrect number of parameters.\nUsage:\n\tod-update <data_dir>"
	exit 1
fi

$(sed -n 's/^\([:a-z0-9]\+\) \/boot \([a-z]\+\).*/export SYSPART=\1\nexport SYSPART_TYPE=\2/p' /proc/mounts)

MODEL=$(sed -n 's/\(.*\)ingenic.*/\1/p' /sys/firmware/devicetree/base/compatible)
HWVARIANT=$(sed 's/.*hwvariant=\([[:alnum:]]\+\).*/\1/' /proc/cmdline)
case "$MODEL" in
	retromini)
		INSTALL_ON_NAND=Y
		SYSDEV=/dev/mtd0
		;;
	gcw,zero)
		if [ -z "$HWVARIANT" ] ; then
			# Only old "Frankenzeros" can have a bootloader so old that
			# it doesn't pass the 'hwvariant' parameter to the kernel...
			HWVARIANT="v11_ddr2_256mb"
		fi
		unset INSTALL_ON_NAND
		SYSDEV=$(echo $SYSPART |sed -n 's/\(\/dev\/mmcblk[0-9]\+\)p[0-9]\+/\1/p')
		;;
	*)
		echo "Unknown model $MODEL"
		exit 1
		;;
esac

MNT=/mnt/_system_update
[ "$(grep kernel_bak /proc/cmdline)" ] && KERNEL_IS_BACKUP=Y
[ "$(grep rootfs_bak /proc/cmdline)" ] && ROOTFS_IS_BACKUP=Y

BOOTLD=$1/ubiboot-${HWVARIANT}.bin
KERNEL=$1/uzImage.bin
ROOTFS=$1/rootfs.squashfs
MODULES_FS=$1/modules.squashfs
MININIT=$1/mininit-syspart
DEVICETREE=$1/${HWVARIANT}.dtb

[ ! -r $DEVICETREE ] && DEVICETREE=/sys/firmware/fdt


handle_err() {
	rm -f $MNT/update_k.bin $MNT/update_r.bin \
		  $MNT/update_m.bin $MNT/mininit-syspart-new

	# Umount twice, since we bind-mounted twice
	umount $MNT
	umount $MNT
	rmdir $MNT

	exit $1
}

mkdir -p $MNT

# bind-mount /boot read-write
mount --bind $MNT $MNT
# /boot has already been mounted with --make-shared
mount --make-slave $MNT
mount --bind /boot $MNT
mount -o remount,rw $MNT

if [ -r $ROOTFS ] ; then
	echo "Updating rootfs..."
	pv -p $ROOTFS > $MNT/update_r.bin
	[ $? -ne 0 ] && handle_err 2
fi

if [ -r $MININIT ] ; then
	echo -e "\nUpdating mininit..."
	pv -p $MININIT > $MNT/mininit-syspart-new
	[ $? -ne 0 ] && handle_err 3

	chmod +x $MNT/mininit-syspart-new
fi

if [ -r $KERNEL ] ; then
	echo -e "\nUpdating kernel..."

	KERNEL_SIZE=$(wc -c $KERNEL |cut -d ' ' -f1)
	DTB_SIZE=$(wc -c $DEVICETREE |cut -d ' ' -f1)

	if [ "$INSTALL_ON_NAND" ] ; then
		VOLUME_ID=$(ubinfo -d 0 -N kernel_bak |head -n1 |sed "s/.*\([[:digit:]]\+\) .*/\1/")
		if [ "$KERNEL_IS_BACKUP" ] ; then
			VOLUME_ID=$(expr 1 - $VOLUME_ID)
		fi

		pv -p $KERNEL $DEVICETREE | ubiupdatevol /dev/ubi0_$VOLUME_ID -s $(expr $KERNEL_SIZE + $DTB_SIZE) -
	else
		pv -p $KERNEL $DEVICETREE > $MNT/update_k.bin
	fi

	[ $? -ne 0 ] && handle_err 4
fi

if [ -r $MODULES_FS ] ; then
	echo -e "\nInstalling updated modules..."
	pv -p $ROOTFS > $MNT/update_m.bin
	[ $? -ne 0 ] && handle_err 5
fi

if [ -r $BOOTLD ] ; then
	echo -e "\nUpdating bootloader..."

	if [ "$INSTALL_ON_NAND" ] ; then
		flash_erase $SYSDEV 0 1 >/dev/null 2>&1
		[ $? -ne 0 ] && handle_err 6

		pv -p $BOOTLD | nandwrite -q -p $SYSDEV -
	else
		dd if=$BOOTLD of=$SYSDEV bs=512 seek=1 count=16 conv=notrunc 2>/dev/null
	fi

	[ $? -ne 0 ] && handle_err 6
fi

echo -e "\nFlushing caches..."
sync

# Make sure that the verification steps use data from disk, not cached data.
echo 3 > /proc/sys/vm/drop_caches

if [ -r $ROOTFS -a -r ${ROOTFS}.sha1 ] ; then
	echo -e "\nVerifying rootfs..."
	ROOTFS_SHA1=$(pv -p $MNT/update_r.bin |sha1sum |cut -d' ' -f1)

	if [ "$ROOTFS_SHA1" != "$(cat ${ROOTFS}.sha1)" ] ; then
		handle_err 7
	fi
fi

if [ -r $MININIT -a -r ${MININIT}.sha1 ] ; then
	echo -e "\nVerifying mininit..."
	MININIT_SHA1=$(pv -p $MNT/mininit-syspart-new |sha1sum |cut -d' ' -f1)

	if [ "$MININIT_SHA1" != "$(cat ${MININIT}.sha1)" ] ; then
		handle_err 8
	fi
fi

if [ -r $KERNEL -a -r ${KERNEL}.sha1 ] ; then
	echo -e "\nVerifying kernel..."

	[ "$INSTALL_ON_NAND" ] && BLOCK_SIZE=4096 || BLOCK_SIZE=512
	NB_BLOCKS=$(expr $KERNEL_SIZE \/ $BLOCK_SIZE)
	LEFTOVER=$(expr $KERNEL_SIZE \% $BLOCK_SIZE)

	if [ "$INSTALL_ON_NAND" ] ; then
		KERNEL_SHA1=$( ( dd if=/dev/ubi0_$VOLUME_ID ibs=$BLOCK_SIZE count=$NB_BLOCKS ; \
			dd if=/dev/ubi0_$VOLUME_ID ibs=1 skip=$(expr $KERNEL_SIZE - $LEFTOVER) count=$LEFTOVER) 2>/dev/null \
			| pv -p -s $KERNEL_SIZE |sha1sum |cut -d' ' -f1 \
		)
	else
		KERNEL_SHA1=$( ( dd if=$MNT/update_k.bin ibs=$BLOCK_SIZE count=$NB_BLOCKS ; \
			dd if=$MNT/update_k.bin ibs=1 skip=$(expr $KERNEL_SIZE - $LEFTOVER) count=$LEFTOVER) 2>/dev/null \
			| pv -p -s $KERNEL_SIZE |sha1sum |cut -d' ' -f1 \
		)
	fi

	if [ "$KERNEL_SHA1" != "$(cat ${KERNEL}.sha1)" ] ; then
		handle_err 9
	fi

	if [ -r ${DEVICETREE}.sha1 ] ; then
		DTB_SRC_SHA1=$( cat ${DEVICETREE}.sha1 )
	else
		DTB_SRC_SHA1=$( sha1sum ${DEVICETREE} |cut -d' ' -f1 )
	fi

	if [ "$INSTALL_ON_NAND" ] ; then
		DTB_SHA1=$( ( dd if=/dev/ubi0_$VOLUME_ID ibs=1 skip=$KERNEL_SIZE count=$DTB_SIZE) 2>/dev/null |sha1sum |cut -d' ' -f1 )
	else
		DTB_SHA1=$( ( dd if=$MNT/update_k.bin ibs=1 skip=$KERNEL_SIZE count=$DTB_SIZE) 2>/dev/null |sha1sum |cut -d' ' -f1 )
	fi

	if [ "$DTB_SHA1" != "$DTB_SRC_SHA1" ] ; then
		handle_err 10
	fi
fi

if [ -r $BOOTLD -a -r ${BOOTLD}.sha1 ] ; then
	echo -e "\nVerifying bootloader..."

	BOOTLD_SIZE=$(wc -c $BOOTLD |cut -d' ' -f1)

	if [ "$INSTALL_ON_NAND" ] ; then
		BOOTLD_SHA1=$(nanddump -q -l $BOOTLD_SIZE $SYSDEV |pv -p -s $BOOTLD_SIZE |sha1sum |cut -d' ' -f1)
	else
		BOOTLD_SHA1=$(dd if=$SYSDEV ibs=1 skip=512 count=$BOOTLD_SIZE 2>/dev/null |pv -p -s $BOOTLD_SIZE |sha1sum |cut -d' ' -f1)
	fi

	if [ "$BOOTLD_SHA1" != "$(cat ${BOOTLD}.sha1)" ] ; then
		handle_err 11
	fi
fi

echo -e "\nCommiting changes..."

[ -r $ROOTFS -a "$ROOTFS_IS_BACKUP" ] && mv $MNT/update_r.bin $MNT/rootfs.squashfs
[ -r $MININIT ] && mv $MNT/mininit-syspart-new $MNT/mininit-syspart
[ -r $KERNEL ] && if [ -z "$KERNEL_IS_BACKUP" ] ; then
	if [ "$INSTALL_ON_NAND" ] ; then
		ubirename /dev/ubi0 kernel kernel_bak kernel_bak kernel
	else
		mv $MNT/update_k.bin $MNT/uzImage.bak
	fi
elif [ -z "$INSTALL_ON_NAND" ] ; then
	mv $MNT/update_k.bin $MNT/uzImage.bin
fi

sync

# Umount twice, since we bind-mounted twice
umount $MNT
umount $MNT
rmdir $MNT

# Run chown -R od:users /usr/local/home /media/data/apps
# on the next boot
echo 'CHOWN_HOME=yes' > /usr/local/etc/localfsinit.conf

exit 0
